from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart

from buttons.buttons_user import start_kb, profile, back_kb
from database.database import Database
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID

user_router = Router()
db = Database('fio.db')

class SelectMeet(StatesGroup):
    select_meet = State()

class Registration(StatesGroup):
    name = State()
    birthday = State()
    rename = State()

class CancelMeet(StatesGroup):
    select_to_cancel = State()

@user_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è ü§ù')
        await state.set_state(Registration.name)
    else:
        user_info = db.get_user_info(message.from_user.id)
        await message.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_info["nickname"]}!\n'
            f'–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n'
            f'–Ø –±–æ—Ç —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–º.',
            reply_markup=start_kb
        )

@user_router.message(Registration.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
    await state.set_state(Registration.birthday)

@user_router.message(Registration.birthday)
async def get_birthday(message: types.Message, state: FSMContext):
    birth = message.text
    if birth.count('.') == 2:
        list_birth = birth.split('.')
        if (int(list_birth[0]) <= 31 and int(list_birth[1]) <= 12 and 
            len(list_birth[0]) == 2 and len(list_birth[1]) == 2 and 
            len(list_birth[2]) == 4):
            
            await state.update_data(birthday=birth)
            registration = await state.get_data()
            
            db.set_nickname(message.from_user.id, registration['name'])
            db.set_birthday(message.from_user.id, registration['birthday'])
            
            await message.answer(
                '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n'
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏—à—É –≤ –º–µ–Ω—é‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è',
                reply_markup=start_kb
            )
            await state.clear()
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞')
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!')
        await state.set_state(Registration.birthday)

@user_router.message(F.text=='–ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_meetings(message: types.Message):
    meetings = db.get_user_meetings(message.from_user.id)
    
    if not meetings:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', reply_markup=start_kb)
        return
    
    message_to_answer = ''
    for meeting in meetings:
        message_to_answer += (
            f'–í—Å—Ç—Ä–µ—á–∞ ‚Ññ{meeting["id"]}\n'
            f'–î–∞—Ç–∞: {meeting["date"]}\n'
            f'–í—Ä–µ–º—è: {meeting["time"]}\n\n'
        )
    
    await message.answer(message_to_answer, reply_markup=start_kb)

@user_router.message(F.text=='–ü—Ä–æ—Ñ–∏–ª—å')
async def profil(message: types.Message):
    user_nickname = '–í–∞—à–µ –∏–º—è: ' + str(db.get_nickname(message.from_user.id))
    await message.answer(user_nickname, reply_markup=profile)

@user_router.message(F.text=='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def no_zapis(message: types.Message, state: FSMContext, bot: Bot):
    user_meetings = db.get_user_meetings(message.from_user.id)

    if not user_meetings:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.', reply_markup=start_kb)
        return

    if len(user_meetings) == 1:
        meeting_id_to_cancel = user_meetings[0]['id']
        user_id = message.from_user.id
        user_info = db.get_user_info(user_id)

        if db.cancel_meeting(meeting_id_to_cancel):
            await message.answer(f'–ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚Ññ{meeting_id_to_cancel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=start_kb)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.', reply_markup=start_kb)

        await state.clear()

    else:
        message_to_answer = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:\n\n'
        for meeting in user_meetings:
            message_to_answer += (
                f'–í—Å—Ç—Ä–µ—á–∞ ‚Ññ{meeting["id"]}\n'
                f'–î–∞—Ç–∞: {meeting["date"]}\n'
                f'–í—Ä–µ–º—è: {meeting["time"]}\n\n'
            )

        await message.answer(message_to_answer)
        await state.set_state(CancelMeet.select_to_cancel)

@user_router.message(CancelMeet.select_to_cancel, F.text)
async def process_cancel_meet(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    meeting_id = message.text
    
    try:
        meeting_id = int(meeting_id)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏.')
        return
        
    meeting = db.get_meeting(meeting_id)
    if not meeting or meeting['client_id'] != db.get_internal_user_id(user_id):
        await message.answer('–í—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.')
        return
        
    db.cancel_meeting(meeting_id)
    await message.answer(f'–ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚Ññ{meeting_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=start_kb)
    
    await bot.send_message(ADMIN_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚Ññ{meeting_id} ({meeting['date']} –≤ {meeting['time']}).')
    
    await state.clear()

@user_router.message(F.text=='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
async def changenick(message: types.Message, state: FSMContext):
    await message.answer('–Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò')
    await state.set_state(Registration.rename)

@user_router.message(Registration.rename)
async def changenick1(message: types.Message, state: FSMContext):
    nickname = message.text
    if len(nickname.split())==2:
        if nickname.split()[0].isalpha()==True and nickname.split()[1].isalpha()==True:
            await state.update_data(rename=nickname)
            name=await state.get_data()
            nickname=name['rename']
            old_name=db.get_nickname(message.from_user.id)
            db.change_user_nickname(nickname, old_name)
            await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞—Å –∑–æ–≤—É—Ç {nickname}', reply_markup=start_kb)
            await state.clear()
        else:
            await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∫–∏—Ä—Ä–∏–ª–∏—Ü—ã!')
            await state.set_state(Registration.rename)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!')

@user_router.message(F.text=='–í –º–µ–Ω—é')
async def menu(message: types.Message):
    await message.answer('–ü–µ—Ä–µ–≤–æ–∂—É –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=start_kb)

@user_router.message(F.text=='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É')
async def zapis(message: types.Message, state: FSMContext):
    user_meetings = db.get_user_meetings(message.from_user.id)

    if user_meetings:
        message_to_answer = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n'
        for meeting in user_meetings:
             message_to_answer += (
                f'–í—Å—Ç—Ä–µ—á–∞ ‚Ññ{meeting["id"]}\n'
                f'–î–∞—Ç–∞: {meeting["date"]}\n'
                f'–í—Ä–µ–º—è: {meeting["time"]}\n\n'
            )
        message_to_answer += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é.'
        await message.answer(message_to_answer, reply_markup=start_kb)
    else:
        available_meetings = db.get_available_meetings()

        if not available_meetings:
            await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è –∑–∞–ø–∏—Å–∏.', reply_markup=start_kb)
            return

        message_to_answer = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n'
        for meeting in available_meetings:
            message_to_answer += (
                f'–í—Å—Ç—Ä–µ—á–∞ ‚Ññ{meeting["id"]}\n'
                f'–î–∞—Ç–∞: {meeting["date"]}\n'
                f'–í—Ä–µ–º—è: {meeting["time"]}\n\n'
            )

        await message.answer(message_to_answer)
        await state.set_state(SelectMeet.select_meet)

@user_router.message(SelectMeet.select_meet, F.text)
async def book_meeting(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(select_meet=message.text)
    chose = message.text
    
    try:
        meeting_id = int(chose)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏.')
        await state.clear()
        return

    meeting = db.get_meeting(meeting_id)
    if not meeting:
        await message.answer('–¢–∞–∫–æ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ—Ç(')
        await state.clear()
        return

    if meeting['status'] != '–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è':
        await message.answer('–ù–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É –º–µ—Å—Ç –Ω–µ—Ç')
        await state.clear()
        return

    user_meetings = db.get_user_meetings(message.from_user.id)
    if user_meetings:
        await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–µ —Å–Ω–∞—á–∞–ª–∞.', reply_markup=start_kb)
        await state.clear()
        return

    if db.book_meeting(meeting_id, message.from_user.id):
        user_info = db.get_user_info(message.from_user.id)
        await message.answer(
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚Ññ{meeting_id} –Ω–∞ {meeting["date"]} –≤ {meeting["time"]}',
            reply_markup=start_kb
        )
        await bot.send_message(
            ADMIN_ID,
            f'{user_info["nickname"]} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚Ññ{meeting_id} –Ω–∞ {meeting["date"]} –≤ {meeting["time"]}'
        )

        await state.clear()
        return

    else:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É')
        await state.clear()

@user_router.message()
async def bot_message(message: types.Message):
    await message.answer('–ù–µ –∑–Ω–∞—é —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏–¥–∏—Ç–µ –ª—É—á—à–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_kb)